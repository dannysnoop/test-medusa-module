{"version":3,"file":"merge-cart.js","sourceRoot":"","sources":["../../../src/api/guest-cart/merge-cart.ts"],"names":[],"mappings":";;AAeA,8BA+BC;AAtCD,0DAAmE;AAInE;;GAEG;AACI,KAAK,UAAU,SAAS,CAC3B,GAAY,EACZ,GAAa,EACb,IAAkB;IAEpB,IAAI,CAAC;QACH,gEAAgE;QAChE,MAAM,SAAS,GAAG,GAAqC,CAAC;QAExD,yCAAyC;QACzC,MAAM,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAoB,CAAC;QACtF,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAkB,CAAC;QAChF,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAgB,CAAC;QAC1E,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAkB,CAAC;QAE9E,MAAM,gBAAgB,GAAG,IAAI,mCAAsB,CAC/C,EAAE,eAAe,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,EAAE,EAC7D,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CACzC,CAAC;QAEF,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;QAC9B,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,EAAE,WAAW,CAAC;QAEhD,6BAA6B;QAC7B,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEzE,+BAA+B;QAC/B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAC7C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,8CAA8C;IAC7D,CAAC;AACH,CAAC","sourcesContent":["import {\r\n  CartService,\r\n  CustomerService,\r\n  MedusaRequest,\r\n  MedusaResponse,\r\n  RegionService,\r\n} from '@medusajs/medusa';\r\nimport { ICacheService } from '@medusajs/types';\r\nimport { GuestCartModuleService } from '../../services/guest-cart';\r\nimport { MergeCartParams } from '../../model/merge-cart.dto';\r\nimport { NextFunction, Request, Response } from 'express';\r\n\r\n/**\r\n * Merges the guest cart with the user cart.\r\n */\r\nexport async function mergeCart(\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction,\r\n): Promise<void> {\r\n  try {\r\n    // Cast the request to MedusaRequest to access custom properties\r\n    const medusaReq = req as MedusaRequest<MergeCartParams>;\r\n\r\n    // Instantiate the GuestCartModuleService\r\n    const customerService = medusaReq.scope.resolve('customerService') as CustomerService;\r\n    const regionService = medusaReq.scope.resolve('regionService') as RegionService;\r\n    const cartService = medusaReq.scope.resolve('cartService') as CartService;\r\n    const cacheService = medusaReq.scope.resolve('cacheService') as ICacheService;\r\n\r\n    const guestCartService = new GuestCartModuleService(\r\n        { customerService, regionService, cacheService, cartService },\r\n        { jwt_secret: process.env.JWT_SECRET },\r\n    );\r\n\r\n    const params = medusaReq.body;\r\n    const customer_id = medusaReq.user?.customer_id;\r\n\r\n    // Call the mergeCarts method\r\n    const mergedCart = await guestCartService.MergeCart(params, customer_id);\r\n\r\n    // Respond with the merged cart\r\n    res.status(200).json({ data: mergedCart });\r\n  } catch (error: any) {\r\n    next(error); // Pass the error to the Express error handler\r\n  }\r\n}"]}