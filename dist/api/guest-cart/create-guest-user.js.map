{"version":3,"file":"create-guest-user.js","sourceRoot":"","sources":["../../../src/api/guest-cart/create-guest-user.ts"],"names":[],"mappings":";;AAeA,0CA0BC;AA/BD,0DAAmE;AAEnE;;GAEG;AACI,KAAK,UAAU,eAAe,CACjC,GAAO,EACP,GAAQ;IAEV,qGAAqG;IACrG,MAAM,eAAe,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAoB,CAAC;IAChF,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAkB,CAAC;IAC1E,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAkB,CAAC;IACxE,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAgB,CAAC;IAEpE,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC;IACxB,yCAAyC;IACzC,MAAM,gBAAgB,GAAG,IAAI,mCAAsB,CACjD,EAAE,eAAe,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,EAAE,EAC7D,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CACvC,CAAC;IAEF,IAAI,CAAC;QACH,6CAA6C;QAC7C,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,gBAAgB,CAAC,0BAA0B,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAExF,gCAAgC;QAChC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;IACzC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC","sourcesContent":["import {\r\n  MedusaRequest,\r\n  MedusaResponse,\r\n  CustomerService,\r\n  RegionService,\r\n  CartService,\r\n} from '@medusajs/medusa';\r\n\r\nimport { ICacheService } from '@medusajs/types';\r\nimport { CreateTempCustomerWithCartDTO } from '../../model/guest-cart.dto';\r\nimport { GuestCartModuleService } from '../../services/guest-cart';\r\n\r\n/**\r\n * Creates a guest user and returns a response with the guest user details.\r\n */\r\nexport async function createGuestUser(\r\n    req:any,\r\n    res: any,\r\n): Promise<void> {\r\n  // Instantiate required services (these should be retrieved from your dependency injection container)\r\n  const customerService = req.scope.resolve('customerService') as CustomerService;\r\n  const regionService = req.scope.resolve('regionService') as RegionService;\r\n  const cacheService = req.scope.resolve('cacheService') as ICacheService;\r\n  const cartService = req.scope.resolve('cartService') as CartService;\r\n\r\n  const params = req.body;\r\n  // Instantiate the GuestCartModuleService\r\n  const guestCartService = new GuestCartModuleService(\r\n    { customerService, regionService, cacheService, cartService },\r\n    { jwt_secret: process.env.JWT_SECRET },\r\n  );\r\n\r\n  try {\r\n    // Call the createTempCustomerWithCart method\r\n    const { access_token } = await guestCartService.createTempCustomerWithCart(params, req);\r\n\r\n    // Respond with the access token\r\n    res.status(200).json({ access_token });\r\n  } catch (error: any) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n}\r\n"]}