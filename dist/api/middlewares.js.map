{"version":3,"file":"middlewares.js","sourceRoot":"","sources":["../../src/api/middlewares.ts"],"names":[],"mappings":"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","sourcesContent":["import type {MiddlewaresConfig,} from \"@medusajs/medusa\"\r\nimport {\r\n    MedusaRequest,\r\n    MedusaResponse,\r\n    MedusaNextFunction,\r\n    MiddlewareRoute,\r\n    StorePostCartsCartReq,\r\n} from '@medusajs/medusa';\r\n\r\nimport { MedusaError } from '@medusajs/utils';\r\nimport jwt from 'jsonwebtoken';\r\nimport { JWTPayload } from 'jose';\r\n\r\n\r\n\r\nexport const checkGuestCustomer = (\r\n    req: MedusaRequest<StorePostCartsCartReq>,\r\n    res: MedusaResponse,\r\n    next: MedusaNextFunction,\r\n): void => {\r\n    try {\r\n        const token = extractTokenFromHeader(req);\r\n\r\n        if (req.baseUrl === '/store/guest-cart/merge-cart' && !token) {\r\n            throw new MedusaError(\r\n                MedusaError.Types.UNAUTHORIZED,\r\n                'Authorization header is required for this endpoint.',\r\n            );\r\n        }\r\n\r\n        // Proceed to next middleware if no token is found (or token is not relevant for guest-cart merge)\r\n        if (!token) {\r\n            next();\r\n            return;\r\n        }\r\n\r\n        const decoded = jwt.decode(token) as JWTPayload;\r\n        const isGuest = isGuestCustomer(decoded);\r\n\r\n        // Block guest users from accessing restricted GET endpoint\r\n        if (isGuest && isGuestAccessingRestrictedEndpoint(req)) {\r\n            throw new MedusaError(\r\n                MedusaError.Types.NOT_ALLOWED,\r\n                'Access to this endpoint is not allowed.',\r\n            );\r\n        }\r\n\r\n        // Handle POST requests for guest users\r\n        if (isModifyingRequest(req)) {\r\n            handleGuestCustomerPostRequest(req, isGuest);\r\n            next();\r\n            return;\r\n        }\r\n\r\n        // Proceed to next middleware if none of the conditions apply\r\n        next();\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const config: MiddlewaresConfig = {\r\n    routes: [\r\n        {\r\n            matcher: \"\",\r\n            middlewares: [\r\n                checkGuestCustomer\r\n            ],\r\n        },\r\n    ],\r\n}\r\n\r\n\r\n\r\nconst isGuestCustomer = (decoded: JWTPayload): boolean => decoded.is_guest as boolean;\r\n\r\nconst isGuestAccessingRestrictedEndpoint = (req: MedusaRequest<StorePostCartsCartReq>): boolean => {\r\n    return req.method === 'GET' && req.baseUrl === '/store/customers/me';\r\n};\r\n\r\nconst isModifyingRequest = (req: MedusaRequest<StorePostCartsCartReq>): boolean =>\r\n    req.method === 'POST' ||\r\n    req.method === 'DELETE' ||\r\n    req.method === 'PUT' ||\r\n    req.method === 'UPDATE';\r\nconst isLineItemEndpoint = (req: MedusaRequest<StorePostCartsCartReq>): boolean => {\r\n    return /^\\/store\\/carts(\\/[^/]+\\/line-items(\\/[^/]+)?)$/.test(req.baseUrl);\r\n};\r\n\r\nconst isStoreCartEndpoint = (req: MedusaRequest<StorePostCartsCartReq>): boolean => {\r\n    return /^\\/store\\/carts$/.test(req.baseUrl);\r\n};\r\n\r\n// Function to validate authorization header and extract token\r\nconst extractTokenFromHeader = (req: MedusaRequest<StorePostCartsCartReq>): string | null => {\r\n    const authHeader = req.headers.authorization;\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return null;\r\n    }\r\n    return authHeader.split(' ')[1];\r\n};\r\n\r\n// Function to handle guest customer actions for restricted POST requests\r\nconst handleGuestCustomerPostRequest = (\r\n    req: MedusaRequest<StorePostCartsCartReq>,\r\n    isGuest: boolean,\r\n): void => {\r\n    if (isGuest) {\r\n        // Allow guest customers to add line items\r\n        if (isLineItemEndpoint(req) || isStoreCartEndpoint(req)) {\r\n            return;\r\n        }\r\n\r\n        throw new MedusaError(\r\n            MedusaError.Types.NOT_ALLOWED,\r\n            'Guest customers are not allowed to perform this action.',\r\n        );\r\n    }\r\n};\r\n\r\n// Refactored middleware function for checking guest customer status\r\n\r\n"]}