{"version":3,"file":"guest-cart.js","sourceRoot":"","sources":["../../src/services/guest-cart.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  TransactionBaseService,\r\n  MedusaRequest,\r\n  CustomerService,\r\n  RegionService,\r\n  Region, Customer,\r\n  MedusaResponse,\r\n  CartService,\r\n} from '@medusajs/medusa';\r\nimport { ICacheService } from '@medusajs/types';\r\nimport { LineItem } from '@medusajs/medusa';\r\nimport { CreateTempCustomerWithCartDTO } from '../model/guest-cart.dto';\r\nimport { SignJWT } from 'jose';\r\nimport { MergeCartParams } from '../model/merge-cart.dto';\r\nimport { MedusaError } from 'medusa-core-utils';\r\n\r\ntype Dependencies = {\r\n  customerService: CustomerService;\r\n  regionService: RegionService;\r\n  cacheService: ICacheService;\r\n  cartService: CartService;\r\n};\r\n\r\ninterface ExtendedCreateCustomerInput {\r\n  email: string;\r\n  is_guest?: boolean;\r\n  device_id: string;\r\n  region_id: string;\r\n}\r\n\r\ntype ModuleOptions = {\r\n\r\n  jwt_secret?: string;\r\n};\r\n\r\nexport class GuestCartModuleService extends TransactionBaseService {\r\n  private readonly customerService_: CustomerService;\r\n  private readonly regionService_: RegionService;\r\n  private readonly cartService_: CartService;\r\n  private readonly cacheService_: ICacheService;\r\n  protected readonly options_: ModuleOptions;\r\n\r\n  constructor(\r\n    { customerService, regionService, cacheService , cartService}: Dependencies,\r\n    options: ModuleOptions\r\n  ) {\r\n    super({ customerService, regionService, cacheService });\r\n    this.customerService_ = customerService;\r\n    this.regionService_ = regionService;\r\n    this.cacheService_ = cacheService;\r\n    this.cartService_ = cartService;\r\n    this.options_ = options;\r\n  }\r\n\r\n  async createTempCustomerWithCart(\r\n    params: CreateTempCustomerWithCartDTO,\r\n    req: MedusaRequest\r\n  ): Promise<{ access_token: string }> {\r\n    const { device_id, region_id } = params;\r\n\r\n    let region: Region | null = await this.cacheService_.get(`region:${region_id}`);\r\n    if (!region) {\r\n      if (!region_id) {\r\n        throw new Error('Region ID is required');\r\n      }\r\n      region = await this.regionService_.retrieve(region_id);\r\n      if (!region || region.metadata?.enable_guest_user !== 'true') {\r\n        throw new Error('Region not supported for guest customer');\r\n      }\r\n      await this.cacheService_.set(`region:${region_id}`, JSON.stringify(region), 3600);\r\n    } else {\r\n      region = JSON.parse(JSON.stringify(region)); // Ensure proper type handling\r\n    }\r\n\r\n    if (!device_id) {\r\n      throw new Error('Device ID is required');\r\n    }\r\n    let customer = await this.getUserByDeviceId(device_id);\r\n    if (!customer) {\r\n      const tempIdentifier = Math.floor(Math.random() * 1000000);\r\n      customer = await this.customerService_.create({\r\n        email: `temp-${tempIdentifier}@example.com`,\r\n        is_guest: true,\r\n        device_id,\r\n        region_id,\r\n      } as ExtendedCreateCustomerInput);\r\n    }\r\n\r\n    req.session.customer_id = customer.id;\r\n    const access_token = await this.createCustomerJwt(customer.id, true);\r\n\r\n    return { access_token };\r\n  }\r\n\r\n  async createCustomerJwt(customerId: string, is_guest = false) {\r\n    // sign token\r\n    if (!this.options_.jwt_secret) {\r\n      throw new Error('Empty jwt secret');\r\n    }\r\n\r\n    const secretKey = new TextEncoder().encode(this.options_.jwt_secret);\r\n\r\n    const iat = Math.floor(Date.now() / 1000);\r\n    const tokenPayload = { customer_id: customerId, domain: 'store', iat, is_guest };\r\n\r\n    return await new SignJWT(tokenPayload)\r\n      .setProtectedHeader({ alg: 'HS256', typ: 'JWT' })\r\n      .setExpirationTime('30d')\r\n      .sign(secretKey);\r\n  }\r\n\r\n  private async getUserByDeviceId(device_id: string): Promise<Customer | null> {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    const customers = await this.customerService_.list({\r\n      // device_id must be part of your Customer entity if you're using this\r\n      device_id,\r\n    } as any)\r\n\r\n    return customers[0] ?? null\r\n  }\r\n\r\n\r\n   MergeCart = async (data: MergeCartParams , customer_id: string = '') => {\r\n    const {    to_cart_id, from_cart_id  } = data;\r\n\r\n    try {\r\n      const customer = await this.customerService_.retrieve(customer_id);\r\n      if (!customer) {\r\n        throw new MedusaError(MedusaError.Types.NOT_FOUND, 'Customer not found');\r\n      }\r\n  \r\n      const [toCart, fromCart] = await Promise.all([\r\n        this.cartService_.retrieveWithTotals(to_cart_id ?? ''),\r\n        this.cartService_.retrieveWithTotals(from_cart_id ?? ''),\r\n      ]);\r\n  \r\n      if (!toCart || to_cart_id !== customer.metadata?.cart_id) {\r\n        throw new MedusaError(MedusaError.Types.NOT_FOUND, 'First cart not found or invalid ID');\r\n      }\r\n  \r\n      if (!fromCart) {\r\n        throw new MedusaError(MedusaError.Types.NOT_FOUND, 'Second cart not found');\r\n      }\r\n  \r\n      const lineItemsToAdd = fromCart.items.map((item: { tax_lines: any; [key: string]: any }) => {\r\n        const { tax_lines, ...rest } = item;\r\n        return rest;\r\n      });\r\n      for (const lineItem of lineItemsToAdd) {\r\n        await this.cartService_.addLineItem(toCart.id, lineItem as any);\r\n      }\r\n  \r\n      await Promise.all(\r\n        lineItemsToAdd.map(async (lineItem) => {\r\n          await this.cartService_.removeLineItem(lineItem.cart_id, lineItem.id);\r\n        }),\r\n      );\r\n  \r\n      return await this.cartService_.retrieveWithTotals(toCart.id);\r\n   \r\n    } catch (error: any) {\r\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\r\n      throw new MedusaError(MedusaError.Types.NOT_FOUND, errorMessage);\r\n    }\r\n}\r\n}"]}