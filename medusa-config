const dotenv = require('dotenv');

let ENV_FILE_NAME = '';
switch (process.env.NODE_ENV) {
  case 'production':
    ENV_FILE_NAME = '.env.production';
    break;
  case 'staging':
    ENV_FILE_NAME = '.env.staging';
    break;
  case 'test':
    ENV_FILE_NAME = '.env.test';
    break;
  case 'development':
  default:
    ENV_FILE_NAME = '.env';
    break;
}

try {
  dotenv.config({ path: process.cwd() + '/' + ENV_FILE_NAME });
} catch (e) {}

// CORS when consuming Medusa from admin
const ADMIN_CORS = process.env.ADMIN_CORS || 'http://localhost:7000,http://localhost:7001';

// CORS to avoid issues when consuming Medusa from a client
const STORE_CORS = process.env.STORE_CORS || 'http://localhost:8000';

const DATABASE_JSON = process.env.DATABASE_JSON;

let DATABASE_URL = process.env.DATABASE_URL || 'postgres://localhost/medusa-starter-default';

const sentryDSN = process.env.SENTRY_DSN || undefined;
const sentryApiToken = process.env.SENTRY_API_TOKEN || undefined;
const sentryTracesSampleRate =
  process.env.SENTRY_TRACES_SAMPLE_RATE && !isNaN(Number(process.env.SENTRY_TRACES_SAMPLE_RATE))
    ? Number(process.env.SENTRY_TRACES_SAMPLE_RATE)
    : 0;
const sentryEnvironment = process.env.SENTRY_ENV || 'development';

if (DATABASE_JSON) {
  const databaseFromJson = JSON.parse(DATABASE_JSON);

  // this is stupid and annoying, but we want AWS to manage our database credentials.
  // for database clusters, it only includes username and password in its secret json
  // for individual databases, it includes all the information we need
  if (
    databaseFromJson.username &&
    databaseFromJson.password &&
    process.env.DATABASE_ENGINE &&
    process.env.DATABASE_HOST &&
    process.env.DATABASE_PORT &&
    process.env.DATABASE_DBNAME
  ) {
    DATABASE_URL = `${process.env.DATABASE_ENGINE}://${databaseFromJson.username}:${encodeURIComponent(databaseFromJson.password)}@${process.env.DATABASE_HOST}:${process.env.DATABASE_PORT}/${process.env.DATABASE_DBNAME}`;
  } else if (
    databaseFromJson.engine &&
    databaseFromJson.username &&
    databaseFromJson.password &&
    databaseFromJson.host &&
    databaseFromJson.port &&
    databaseFromJson.dbname
  ) {
    DATABASE_URL = `${databaseFromJson.engine}://${databaseFromJson.username}:${encodeURIComponent(databaseFromJson.password)}@${databaseFromJson.host}:${databaseFromJson.port}/${databaseFromJson.dbname}`;
  }
}

if (process.env.DATABASE_SSL === 'true') {
  DATABASE_URL = DATABASE_URL + '?ssl=true';
}

const storagePlugin = process.env.S3_URL
  ? {
      resolve: `medusa-file-s3`,
      options: {
        s3_url: process.env.S3_URL,
        bucket: process.env.S3_BUCKET,
        region: process.env.S3_REGION,
        aws_config_object: {
          // The medusa s3 plugin tries to add the credentials object, using an AWS secret key.
          // If you use the AWS CLI or are running on an ec2 instance, the AWS library will
          // automatically authenticate using that... as long as the credentials object is not defined.
          // So this overwrites medusa's attempt to make one.
          credentials: null,
        },
      },
    }
  : {
      resolve: `@medusajs/file-local`,
      options: {
        upload_dir: 'uploads',
      },
    };

const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379';

const plugins = [
  `medusa-fulfillment-manual`,
  `medusa-payment-manual`,
  {
    resolve: `@perseidesjs/medusa-plugin-rate-limit`,
    /** @type {import('@perseidesjs/medusa-plugin-rate-limit').PluginOptions} */
    options: {
      limit: 150,
      window: 60,
    },
  },
  storagePlugin,
  {
    resolve: `medusa-plugin-sendgrid`,
    options: {
      api_key: process.env.SENDGRID_API_KEY,
      from: process.env.SENDGRID_FROM,
      medusa_restock_template: process.env.SENDGRID_STOCK_NOTIFICATION_ID,
      order_shipped_template: process.env.SENDGRID_SHIPMENT_TRACK_ID,
      customer_password_reset_template: process.env.SENDGRID_CUSTOMER_PASSWORD_RESET_ID,
      user_password_reset_template: process.env.SENDGRID_USER_PASSWORD_RESET_ID,
    },
  },
  {
    resolve: `medusa-plugin-twilio-sms`,
    options: {
      account_sid: process.env.TWILIO_SMS_ACCOUNT_SID,
      auth_token: process.env.TWILIO_SMS_AUTH_TOKEN,
      from_number: process.env.TWILIO_SMS_FROM_NUMBER,
    },
  },
  {
    resolve: `@rsc-labs/medusa-products-bought-together`,
    options: {
      getLimit: 10,
    },
  },
  {
    resolve: `@rsc-labs/medusa-store-analytics`,
    options: {
      enableUI: true,
    },
  },
];

if (process.env.STRIPE_API_KEY && process.env.STRIPE_WEBHOOK_SECRET) {
  plugins.push({
    resolve: `medusa-payment-stripe`,
    options: {
      api_key: process.env.STRIPE_API_KEY,
      webhook_secret: process.env.STRIPE_WEBHOOK_SECRET,
      capture: process.env.STRIPE_AUTOMATIC_CAPTURE === 'true',
    },
  });
}

// resolve paypal plugin without options as it get loaded from db
// check paypal-provider.ts in service folder for more info
plugins.push({
  resolve: `medusa-payment-paypal`,
});

if (process.env.ALGOLIA_APP_ID && process.env.ALGOLIA_ADMIN_API_KEY) {
  plugins.push({
    resolve: `medusa-plugin-algolia`,
    options: {
      applicationId: process.env.ALGOLIA_APP_ID,
      adminApiKey: process.env.ALGOLIA_ADMIN_API_KEY,
      settings: {
        products: {
          indexSettings: {
            searchableAttributes: [
              'title',
              'collection_title',
              'brand',
              'description',
              'handle',
              'product_translations.title',
              'product_translations.description',
              'product_translations.handle',
            ],
            attributesToRetrieve: [
              'id',
              'title',
              'description',
              'handle',
              'thumbnail',
              'collection_title',
              'brand',
              'currency_codes',
              'sales_channels',
              'product_translations',
            ],
            attributesForFaceting: [
              'filterOnly(currency_codes)',
              'filterOnly(sales_channels)',
              'filterOnly(product_translations.translation_language.language_key)',
            ],
          },
          transformer: function (product) {
            if (product.is_star_only_purchase || product.status !== 'published') {
              // We don't want star products or non-published products to be searchable.
              // Search indexing throws an error if we don't return anything,
              // but giving no information with the object should at least make it unsearchable.
              return {
                objectID: product.id,
              };
            }
            const variantCurrencies = new Set();
            product.variants.forEach((variant) => {
              variant.prices.forEach((price) => {
                if (!variantCurrencies.has(price.currency_code)) {
                  variantCurrencies.add(price.currency_code);
                }
              });
            });

            return {
              objectID: product.id,
              title: product.title,
              description: product.description,
              handle: product.handle,
              thumbnail: product.thumbnail,
              collection_title: product.collection?.title,
              brand: product.product_brand?.name,
              sales_channels: product.sales_channels?.map((sales_channel) => sales_channel.id),
              currency_codes: [...variantCurrencies.values()],
              product_translations: product.product_translations,
            };
          },
        },
      },
    },
  });
}

if (process.env.SENTRY_DSN && process.env.SENTRY_TRACES_SAMPLE_RATE) {
  plugins.push({
    resolve: 'medusa-plugin-sentry',
    options: {
      dsn: sentryDSN,
      apiToken: sentryApiToken,
      release: sentryEnvironment,
      integrations: (router, Sentry, Tracing) => {
        return [
          new Sentry.Integrations.Http({ tracing: true }),
          new Tracing.Integrations.Express({ router }),
        ];
      },
      tracesSampleRate: sentryTracesSampleRate,
      environment: sentryEnvironment,
      attachStacktrace: true,
      debug: false
    },
  });
}

const modules = {
  inventoryService: {
    resolve: '@medusajs/inventory',
  },
  stockLocationService: {
    resolve: '@medusajs/stock-location',
  },
  eventBus: {
    resolve: '@medusajs/event-bus-redis',
    /** @type {import('@medusajs/event-bus-redis').EventBusRedisModuleOptions} */
    options: {
      redisUrl: REDIS_URL,
      redisOptions: {
        tls: process.env.REDIS_TLS === 'true' ? {} : undefined,
      },
    },
  },
  cacheService: {
    resolve: '@medusajs/cache-redis',
    /** @type {import('@medusajs/cache-redis').RedisCacheModuleOptions} */
    options: {
      redisUrl: REDIS_URL,
      redisOptions: {
        tls: process.env.REDIS_TLS === 'true' ? {} : undefined,
      },
    },
  },
};

/** @type {import('@medusajs/medusa').ConfigModule["projectConfig"]} */
const projectConfig = {
  jwtSecret: process.env.JWT_SECRET,
  cookieSecret: process.env.COOKIE_SECRET,
  store_cors: STORE_CORS,
  // database_logging: ['query', 'migration'],
  database_url: DATABASE_URL,
  admin_cors: ADMIN_CORS,
  // TODO [core-47]: figure out how to actually use the database's self-signed certificate
  database_extra:
    process.env.DATABASE_SSL === 'true' ? { ssl: { rejectUnauthorized: false } } : undefined,

  // Medusa is unclear on this, but it seems to need these configs here AND in the individual
  // Redis module configs.
  redis_url: REDIS_URL,
  redis_options: {
    tls: process.env.REDIS_TLS === 'true' ? {} : undefined,
  },

  // This is used to identify the customer app in sign-in-with-apple and google
  custom: {
    apple_audience: process.env.APPLE_AUDIENCE,
    apple_team_id: process.env.APPLE_TEAM_ID,
    apple_key_identifier: process.env.APPLE_KEY_ID,
    apple_private_key: process.env.APPLE_PRIVATE_KEY,
    google_audience_android: process.env.GOOGLE_AUDIENCE_ANDROID,
    google_audience_ios: process.env.GOOGLE_AUDIENCE_IOS,
    kakao_client_id: process.env.KAKAO_CLIENT_ID,
    kakao_redirect_uri: process.env.KAKAO_REDIRECT_URI, // must be same as mobile app used redirect uri
    is_enable_paypal: process.env.ENABLE_PAYPAL === 'true',
  },
};

/** @type {import('@medusajs/medusa').ConfigModule} */
module.exports = {
  projectConfig,
  plugins,
  modules,
  featureFlags: {
    product_categories: true,
  },
};
